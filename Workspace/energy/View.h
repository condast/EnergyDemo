#ifndef View_h
#define View_h

//RGB565. See http://www.barth-dev.de/online/rgb565-color-picker/
#define DARK_BLUE  0x0010 //DARK BLUE
#define DARK_GREEN 0x0200 //DARK GREEN
#define GRAY       0x8410 //GRAY
#define SUN_YELLOW 0xFE41 //YELLOW

#define DIRKSEN_RED_1  0x8025 //DIRKSEN RED 1
#define DIRKSEN_RED_2  0xC888 //DIRKSEN RED 2
#define DIRKSEN_RED_3  0xB847 //DIRKSEN RED 3

#define BUTTON_SIZE 50
#define BUTTON_ROUNDING 2

#define TEXT_1 F("Plan the electricity\nneeded for a week,\ndepending on the weather\nand the bookings.")
#define TEXT_2 F("Plan the placement of a\n transformer box on site")
#define TEXT_3 F("Actual Generation and Consumption\nof Energy")

// For the Adafruit shield, these are the default.
#define TFT_DC 9
#define TFT_CS 10
#define TOUCH_OFFSET  50


// 'home', 21x22px
const PROGMEM uint8_t home[] = {
  0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x70, 0x00, 0x00, 0xf8, 0x00, 0x01, 0xfc, 0x00, 0x03,
  0xfe, 0x00, 0x07, 0xff, 0x00, 0x0f, 0xff, 0x80, 0x1f, 0xff, 0xc0, 0x3f, 0xff, 0xe0, 0x7f, 0xff,
  0xf0, 0x1f, 0xff, 0xc0, 0x1f, 0xff, 0xc0, 0x1f, 0xff, 0xc0, 0x1f, 0x07, 0xc0, 0x1f, 0x07, 0xc0,
  0x1f, 0x07, 0xc0, 0x1f, 0x07, 0xc0, 0x1f, 0x07, 0xc0, 0x1f, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00
};

// 'dirksen_30', 21x30px
const PROGMEM uint8_t dirksen[] = {
  0xff, 0xfc, 0xf8, 0xff, 0xf8, 0x78, 0xff, 0xf0, 0x38, 0xff, 0xf0, 0x38, 0xff, 0xe0, 0x18, 0xff,
  0xe0, 0x18, 0xff, 0xe0, 0x18, 0xff, 0xe0, 0x18, 0xfe, 0x7f, 0x88, 0xfc, 0x3f, 0xc8, 0xfc, 0x3f,
  0xc8, 0xf8, 0x1f, 0xe8, 0xf8, 0x1f, 0xe8, 0xf8, 0x1f, 0xe8, 0xf8, 0x0f, 0xe8, 0xcf, 0xcf, 0xe8,
  0x8f, 0xef, 0xf8, 0x87, 0xef, 0xf8, 0x87, 0xef, 0xf8, 0x87, 0xff, 0xf8, 0x87, 0xff, 0xf8, 0x87,
  0xff, 0xf8, 0x83, 0xff, 0xf8, 0x87, 0xff, 0xf8, 0x87, 0xff, 0xf8, 0x87, 0xff, 0xf8, 0x87, 0xff,
  0xf8, 0x87, 0xff, 0xf8, 0xcf, 0xff, 0xf8, 0xff, 0xff, 0xf8
};

// 'next-64', 46x46px
const PROGMEM uint8_t next_img[] = {
  0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00,
  0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00,
  0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f,
  0xf8, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x00,
  0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f,
  0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8,
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x00,
  0x00, 0x00, 0x00, 0x0c
};

// Use hardware SPI (on Uno, #13, #12, #11) and the above for CS/DC
static Adafruit_ILI9341 tft = Adafruit_ILI9341(TFT_CS, TFT_DC);//display
static Adafruit_FT6206 ts = Adafruit_FT6206();//touch screen

class View {

  private:
    uint16_t sliderValue;

  public: View(void);

    enum Event {
      NONE = 0,
      HOME = 1,
      MENU_1 = 2,
      MENU_2 = 3,
      MENU_3 = 4,
      NEXT = 5
    };

    int xTouched;
    int yTouched;
    void setup();
    String vprinti( uint16_t size, int data );
    String vprintf( int pref, int suff, float num );
    void drawChar(uint16_t x, uint16_t y, char c, uint16_t color, uint16_t bg, uint8_t size);
    void prepare(uint16_t x, uint16_t y, uint16_t colour, uint8_t size, bool wrap);
    void prepare(uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size, bool wrap);
    void vprint( String str );
    void vprintln( String str );
    void toolbar( uint16_t y, uint16_t colour, uint8_t size, String str );
    void toolbar( uint16_t y, uint16_t colour, uint8_t size, bool skipDirksen, String str );
    void house( uint16_t x, uint16_t y, uint16_t background, uint16_t colour );
    void menu( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint16_t rounding, uint8_t size, String label );
    void menuSelect( uint16_t x, uint16_t y, uint16_t background, uint16_t rounding );
    void table( uint16_t x, uint16_t y, uint16_t height, uint16_t rows, uint16_t columns, uint16_t background, uint16_t rounding );
    void clearTable( uint16_t x, uint16_t y, uint16_t height, uint16_t rows, uint16_t columns, uint16_t background, bool skipFirstColumn );
    void next( uint16_t x, uint16_t y, uint16_t colour );
    void simpleText( uint16_t x, uint16_t y, uint16_t colour, uint8_t size, char str[] );
    void simpleText( uint16_t x, uint16_t y, uint16_t colour, uint8_t size, int pref, int suff, float value );
    void text( uint16_t x, uint16_t y, uint16_t colour, uint8_t size, String str );
    void text( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size, String str );
    void refreshText( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size, uint8_t str_size, char str[] );
    void clearText( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size, byte str_size );
    void labelText( uint16_t x, uint16_t y, uint16_t labelColour, uint16_t colour, uint8_t size, String label, String str );
    void labelText( uint16_t x, uint16_t y, uint16_t labelColour, uint16_t colour, uint8_t size, String label, String str, String unit );
    void refreshLabelText( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size, uint8_t str_size, char str[] );
    void simpleLabelText( uint16_t x, uint16_t y, uint16_t colour, uint16_t labelColour, uint8_t size, String label, String str );
    void refreshSimpleLabelText( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size, String label, uint8_t str_size, char str[] );
    void sunWidget( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size);
    void rainWidget( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size );
    void windWidget( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size );
    void celsiusWidget( uint16_t x, uint16_t y, uint16_t background, uint16_t colour, uint8_t size, char chr  );
    void simpleSlider( uint16_t x, uint16_t y, uint8_t length, uint8_t width, uint16_t background, uint16_t colour, uint8_t size, uint16_t value  );
    int refreshSimpleSlider( uint16_t x, uint16_t y, uint8_t length, uint8_t width, uint16_t background, uint16_t colour, uint8_t size, uint16_t max );
    void slider( uint16_t x, uint16_t y, uint8_t length, uint8_t width, uint16_t background, uint16_t colour, uint8_t size, uint16_t min, uint16_t max, uint16_t value  );
    void refreshSlider( uint16_t x, uint16_t y, uint8_t length, uint8_t width, uint16_t background, uint16_t colour, uint8_t size );
    int readSlider( uint16_t x, uint16_t y, uint8_t length, uint8_t width );//returns a negative value if the value has not changed
    byte getEvent();
};
#endif
